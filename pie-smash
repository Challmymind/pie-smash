#!/usr/bin/env python3

import sys
import os
import json
import datetime

PIE_SMASH_VERSION = 0.1
if len(sys.argv) == 2:
    if sys.argv[1] == "--version":
        print("pie-smash version: {}".format(PIE_SMASH_VERSION))

# PATHS.
PIESMASH_DIR = ".config/pie-smash"
CONFIG_NAME = "pie-smash.conf"
DATABASE_NAME = "user-apps-data.json"

# ENV VARIABLES.
PWD = os.getenv("PWD")
HOME = os.getenv("HOME")

# Dependent on previous variables.
CONFIG_PATH = os.path.join(HOME, PIESMASH_DIR, CONFIG_NAME)
CONFIG_PATH = os.path.normpath(CONFIG_PATH)
DATABASE_PATH = os.path.join(HOME, PIESMASH_DIR, DATABASE_NAME)
DATABASE_PATH = os.path.normpath(DATABASE_PATH)

# Error handling.
# Critical:
def crit_err(reason):
    CRIT_ERR_MSG = "Aborting execution. Reason: {}".format(reason)
    print(CRIT_ERR_MSG, file=sys.stderr)
    sys.exit(1)
# Recoverable:
def min_err(reason, action):
    MIN_ERR_MSG = "Encountered some error. Reason: {}\n Action: {}".format(reason, action)
    print(MIN_ERR_MSG, file=sys.stderr)

def get_answer():
    while True:
       answer = input("Answer y/n:")[0].lower() 
       if answer == 'y':
           return True

       elif answer == 'n':
           return False

       else:
           print("Unknown answer, try again")
           continue

    

# Parent class for all file classes.
class FileHandler:

    # Type of file child class is handling.
    file_type = ""

    def __init__(self, path):
        self.path = path
        try:
            with open(self.path, "r") as fdata:
                self.data = json.loads(fdata.read())
        except FileNotFoundError:
            crit_err("No file of type {}".format(file_type))

# Config class.
class Config(FileHandler):
    file_type = "CONFIG"
    
    def __init__(self, path):
        try:
            super().__init__(path)
            if not "bin_path" in self.data:
                crit_err("No bin path in config file")
            else:
                self.bin_path = self.data["bin_path"]
            if not os.path.isdir(self.bin_path):
                crit_err("Incorrect bin path in config")
        except json.decoder.JSONDecodeError:
            crit_err("Invalid JSON in config file")

# Database class.
class Database(FileHandler):
    file_type = "DATABASE"

    def __init__(self, path, binpath):
        self.exmanager = self.ExecManager(binpath)
        try:
            super().__init__(path)
        except json.decoder.JSONDecodeError:
            min_err("Bad database", "Should format?")
            if not get_answer():
                crit_err("Cannot continue without formating database")
            self.data = dict()

    def to_file(self):
        print("Writing data...")
        try:
            with open(self.path, "w") as file:
                file.write(json.dumps(self.data))
        except FileNotFoundError:
            crit_err("No file of type {}".format(file_type))

    def __iter__(self):
        self.list = list(self.data.keys())
        self.len = len(self.data.keys())
        self.i = 0
        return self
    def __next__(self):
        if self.i < self.len:
            name = self.list[self.i]
            date = self.data[name]["date"]
            path = self.data[name]["path"]
            self.i += 1
            return (name, date, path)
        else:
            raise StopIteration

    def add_entry(self, path):

        name = os.path.basename(path)
        if name in self.data:
            if ("path" in self.data[name]) and (self.data[name].get("path",0) == path):
                if "date" in self.data[name]:
                    print("Entry date: {}".format(self.data[name]["date"]))
                print("Do you want to update entry: {}?".format(name))
            else:
                if "date" in self.data[name]:
                    print("Entry date: {}".format(self.data[name]["date"]))
                print("Existing entry {} with diffrent path. Overwrite ?".format(name))

            if not get_answer():
                return False

        else:
            if self.exmanager.exist_in_bin(path):
                crit_err("File exists in bin without entry in database")


        self.data[name] = {}
        self.data[name]["path"] = path
        self.data[name]["date"] = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M")
        self.exmanager.copy(path)
 
        return True

    def delete_entry(self, path):
        name = os.path.basename(path)
        if not name in self.data:
            crit_err("No entry of {} in database".format(name))
        if (not "path" in self.data[name]) or (self.data[name].get("path",0) != path):
            crit_err("Wrong path in database")
        self.exmanager.delete(path)
        del self.data[name]
        return True

    class ExecManager:

        def __init__(self, path):
            self.bin = path
    
        def exist_in_bin(self, path):
            name = os.path.basename(path)
            return os.path.isfile(os.path.join(self.bin, name))
    
        def copy(self, path):
            name = os.path.basename(path)
            dst = os.path.join(self.bin, name)
            os.symlink(path, dst)
            print("Created symlink to: {}".format(dst))

        def delete(self, path):
            name = os.path.basename(path)
            if not self.exist_in_bin(path):
                crit_err("No such file in bin")
            os.remove(os.path.join(self.bin, name))

def pretty_list_print(name, date, path):
    length = len(name)
    if length > 25:
        print("Too long name")
        sys.exit(1)

    print("{: <{size}}".format(name, size=26), end='')
    length = len(date)
    if length > 20:
          print("Too long date")
          sys.exit(1)
    print("{: <{size}}".format(date, size=21), end='')
    print("{}".format(path))

 
def main():
    config = Config(CONFIG_PATH)
    database = Database(DATABASE_PATH, config.bin_path)

    if len(sys.argv) < 2:
        crit_err("Not enough arguments")


    if sys.argv[1] == "list":
        print("{: <26}{: <21}{}".format("NAME", "DATE", "PATH"))
        for (x,y,z) in database:
              pretty_list_print(x,y,z)

    elif sys.argv[1] == "add":
        if len(sys.argv) == 3:
            appPath = os.path.join(PWD, sys.argv[2])
            if not os.path.isfile(appPath):
                crit_err("There is no {} file".format(appPath))

            if database.add_entry(appPath):
                database.to_file()

    elif sys.argv[1] == "delete":
        if len(sys.argv) == 3:
            appPath = os.path.join(PWD, sys.argv[2])
            if not os.path.isfile(appPath):
                crit_err("There is no {} file".format(appPath))

            if database.delete_entry(appPath):
                database.to_file()
    else:
        crit_err("Unknown command, try again")
    

if __name__ == "__main__":
    main()

